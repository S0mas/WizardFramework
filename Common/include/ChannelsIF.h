#pragma once
#include <QString>
#include <vector>

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @class	ChannelsIF
///
/// @brief	The Channels class is the container class for Channels + some functional interface.
///
/// @author	Krzysztof Sommerfeld
/// @date	04.02.2020
////////////////////////////////////////////////////////////////////////////////////////////////////

class ChannelsIF {

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// @class	Channel
	///
	/// @brief	The channel class. It hold channels status (enabled or disabled) and its index.
	///
	/// @author	Krzysztof Sommerfeld
	/// @date	04.02.2020
	////////////////////////////////////////////////////////////////////////////////////////////////////

	class Channel {
		int index_;
		bool enabled_;
	public:
		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// @fn	Channel::Channel();
		///
		/// @brief	Default constructor
		///
		/// @author	Krzysztof Sommerfeld
		/// @date	04.02.2020
		////////////////////////////////////////////////////////////////////////////////////////////////////

		Channel();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// @fn	Channel::Channel(const int index) noexcept;
		///
		/// @brief	Constructor
		///
		/// @author	Krzysztof Sommerfeld
		/// @date	04.02.2020
		///
		/// @param 	index	The index of the channel.
		////////////////////////////////////////////////////////////////////////////////////////////////////

		Channel(const int index) noexcept;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// @fn	int Channel::index() const noexcept;
		///
		/// @brief	Gets the index.
		///
		/// @author	Krzysztof Sommerfeld
		/// @date	04.02.2020
		///
		/// @returns	The index.
		////////////////////////////////////////////////////////////////////////////////////////////////////

		int index() const noexcept;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// @fn	bool Channel::enabled() const noexcept;
		///
		/// @brief	Checks if the channel is enabled.
		///
		/// @author	Krzysztof Sommerfeld
		/// @date	04.02.2020
		///
		/// @returns	True if it is enabled, false if it is not.
		////////////////////////////////////////////////////////////////////////////////////////////////////

		bool enabled() const noexcept;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// @fn	bool Channel::disabled() const noexcept;
		///
		/// @brief	Checks if the channel is disabled.
		///
		/// @author	Krzysztof Sommerfeld
		/// @date	04.02.2020
		///
		/// @returns	True if it is disabled, false if it is not.
		////////////////////////////////////////////////////////////////////////////////////////////////////

		bool disabled() const noexcept;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// @fn	void Channel::enable() noexcept;
		///
		/// @brief	Enables the channel.
		///
		/// @author	Krzysztof Sommerfeld
		/// @date	04.02.2020
		////////////////////////////////////////////////////////////////////////////////////////////////////

		void enable() noexcept;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// @fn	void Channel::disable() noexcept;
		///
		/// @brief	Disables the channel.
		///
		/// @author	Krzysztof Sommerfeld
		/// @date	04.02.2020
		////////////////////////////////////////////////////////////////////////////////////////////////////

		void disable() noexcept;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// @fn	long long int Channel::mask() const noexcept;
		///
		/// @brief	Gets the mask of the channel.
		///
		/// @author	Krzysztof Sommerfeld
		/// @date	04.02.2020
		///
		/// @returns	The mask.
		////////////////////////////////////////////////////////////////////////////////////////////////////

		long long int mask() const noexcept;
	};
	std::vector<Channel> channels_;
public:
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// @fn	ChannelsIF::ChannelsIF(const int channelsNo = 0) noexcept;
	///
	/// @brief	Constructor
	///
	/// @author	Krzysztof Sommerfeld
	/// @date	04.02.2020
	///
	/// @param 	channelsNo	(Optional) The channels no.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	ChannelsIF(const int channelsNo = 0) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// @fn	std::vector<Channel>& ChannelsIF::channels() noexcept;
	///
	/// @brief	Gets the channels.
	///
	/// @author	Krzysztof Sommerfeld
	/// @date	04.02.2020
	///
	/// @returns	The channels;
	////////////////////////////////////////////////////////////////////////////////////////////////////

	std::vector<Channel>& channels() noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// @fn	const std::vector<Channel>& ChannelsIF::channels() const noexcept;
	///
	/// @brief	Gets the channels const.
	///
	/// @author	Krzysztof Sommerfeld
	/// @date	04.02.2020
	///
	/// @returns	The const channels;
	////////////////////////////////////////////////////////////////////////////////////////////////////

	const std::vector<Channel>& channels() const noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// @fn	std::vector<bool> ChannelsIF::channelsStates() const noexcept;
	///
	/// @brief	Gets channels states.
	///
	/// @author	Krzysztof Sommerfeld
	/// @date	04.02.2020
	///
	/// @returns	The channels states.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	std::vector<bool> channelsStates() const noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// @fn	void ChannelsIF::setChannelsStates(const std::vector<bool>& states) noexcept;
	///
	/// @brief	Sets channels states.
	///
	/// @author	Krzysztof Sommerfeld
	/// @date	04.02.2020
	///
	/// @param 	states	The states.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void setChannelsStates(const std::vector<bool>& states) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// @fn	long long int ChannelsIF::channelsStateAsMask() const noexcept;
	///
	/// @brief	Gets channels state as mask.
	///
	/// @author	Krzysztof Sommerfeld
	/// @date	04.02.2020
	///
	/// @returns	The 64 bit mask.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	long long int channelsStateAsMask() const noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// @fn	QString ChannelsIF::channelsStateAsStrMask() const noexcept;
	///
	/// @brief	Gets channels state as string mask.
	///
	/// @author	Krzysztof Sommerfeld
	/// @date	04.02.2020
	///
	/// @returns	The QString mask.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	QString channelsStateAsStrMask() const noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// @fn	void ChannelsIF::enableAll() noexcept;
	///
	/// @brief	Enables all channels.
	///
	/// @author	Krzysztof Sommerfeld
	/// @date	04.02.2020
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void enableAll() noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// @fn	void ChannelsIF::disableAll() noexcept;
	///
	/// @brief	Disables all channels.
	///
	/// @author	Krzysztof Sommerfeld
	/// @date	04.02.2020
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void disableAll() noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// @fn	QString ChannelsIF::toString() const noexcept;
	///
	/// @brief	Convert this object into a string representation
	///
	/// @author	Krzysztof Sommerfeld
	/// @date	04.02.2020
	///
	/// @returns	A QString that represents this object.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	QString toString() const noexcept;
};
